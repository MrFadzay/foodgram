Спроектируйте модели и связи между ними
Из прошлого урока вам точно известно, что в проекте должно быть минимум три модели: «Рецепт», «Тег» и «Ингредиент». Но какие ещё модели нужно создать, чтобы проект полноценно работал? Где будут нужны множественные связи, а где может потребоваться каскадное удаление? 
На этапе проектирования вы должны дать ответы на эти вопросы, решить, где понадобится индексирование, и разобраться с другими задачами, которые касаются архитектуры.
Набросайте схемы моделей и связей. Скомкайте, сожгите и набросайте снова.
Спроектируйте Django-приложения в составе проекта
Прочитайте задание, выделите сходные задачи, объедините их в Django-приложения (для начала в голове или на листе бумаги). 
Поразмышляйте: можно ли приложение скопировать в другой проект, заработает ли оно там в том виде, в котором вы его запланировали. Получилось? Значит, идея верна.
Создайте основу проекта
В склонированном репозитории foodgram разверните виртуальное окружение, создайте новый Django-проект.
Разверните и подключите базу данных — на этапе разработки подойдёт SQLite.
Создайте суперпользователя и нескольких обычных пользователей, они пригодятся для проверки работы проекта.
Создайте файл зависимостей requirements.txt, актуализируйте его каждый раз, когда устанавливаете новые пакеты.
Создайте Django-приложения и модели
Слона нужно есть по частям, поэтому не хватайтесь за всё подряд, а действуйте последовательно: создайте первое Django-приложение, его модели и связи. После этого займитесь следующим Django-приложением. Чёткая очерёдность позволит вам своевременно скорректировать план, если в нём что-то пойдёт не так, ведь важно не только создать Django-приложения, но и понимать, в какой последовательности их стоит реализовывать.
После описания моделей загрузите данные из списка ингредиентов.
Реализуйте логику работы веб-приложения
Именно в этот момент всё пойдёт не по плану. Это нормально. Но если все предыдущие этапы выполнены, работать будет несколько легче, чем если бы этой подготовки не было. 
Самое время запустить в консоли интерактивный режим Python, выполнить import this и немного помедитировать: круг замкнулся.
И после этого — продолжать писать код.
Выпустите проект в продакшен
Когда ваше веб-приложение будет корректно работать локально, выпускайте его в продакшен.
Этот пункт плана можно разделить на следующие этапы:
Проверьте актуальность файла requirements.txt.
Если вы разрабатывали проект на SQLite — замените базу на PostgreSQL.
Напишите докерфайл для образа с Django-проектом и Gunicorn. В конце сборки контейнера должны быть команды для выполнения миграций и сборки статики.
Напишите docker-compose.yml, в нём опишите запуск контейнеров из официальных образов PostgreSQL и nginx и своего контейнера с проектом. Опишите конфигурацию контейнеров.
Запушьте контейнер с проектом в облачное хранилище.
Настройте автоматический деплой при помощи GitHub Actions.
Разверните контейнеры на своём удалённом виртуальном сервере.
Добавьте в файл README.md адрес сервера, на котором запущен ваш проект (укажите IP или доменное имя).
План есть, а чтобы вам было немного проще реализовывать его пункты, загляните в следующий урок — там вас ждёт несколько лайфхаков и подсказок, которые помогут вам при выполнении большого задания.