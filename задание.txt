Стартовый набор и задание
У будущего веб-приложения уже есть готовый фронтенд — это одностраничное SPA-приложение, написанное на фреймворке React. Файлы, необходимые для его сборки, хранятся в репозитории foodgram, в папке frontend. Этот репозиторий вы сможете склонировать к себе на компьютер после того, как прочтёте уроки этой темы.
Кроме папки frontend, в репозитории также есть папки backend, infra, data и docs:
В папке infra — заготовка инфраструктуры проекта: конфигурационный файл nginx и docker-compose.yml.
В папке backend лежит только скрытый файл .gitkeep. Он нужен для того, чтобы папка отображалась в Git. Эта папка предназначена для бэкенда сервиса, который вы разработаете с нуля.
В папке data подготовлен список ингредиентов с единицами измерения — это часть данных для БД, с которой вам предстоит работать. Список сохранён в форматах JSON и CSV.
В папке docs — файлы для отображения спецификации API.

Задание
Ваша задача как бэкенд-разработчика — написать бэкенд в виде REST API для веб-приложения «Фудграм», а также опубликовать это веб-приложение на вашем виртуальном удалённом сервере.
Чтобы «подружить» ваш бэкенд с подготовленным SPA, REST API необходимо реализовать строго в соответствии со спецификацией.
Проект должен быть полностью рабочим и соответствовать описанию из предыдущего урока.
У вас нет жёстких рамок по структуре и содержанию кода, однако есть технические условия общего плана, которые должны быть соблюдены.
Базовые модели проекта
У проекта «Фудграм» должно быть три базовые модели: «Рецепт», «Тег» и «Ингредиент». Скорее всего, кроме этих моделей, вам потребуется создать и другие. Какими они будут — вы сможете решить на этапе проектирования архитектуры веб-приложения.
Рецепт
Атрибуты модели:
Автор публикации (пользователь).
Название.
Картинка.
Текстовое описание.
Ингредиенты — продукты для приготовления блюда по рецепту. Множественное поле с выбором из предустановленного списка и с указанием количества и единицы измерения.
Тег. Можно установить несколько тегов на один рецепт.
Время приготовления в минутах.
Все поля обязательны для заполнения.
Тег
Атрибуты модели:
Название.
Slug.
Все поля обязательны для заполнения и уникальны.
Ингредиент
Атрибуты модели:
Название.
Единица измерения.
Все поля обязательны для заполнения.
Более подробные требования к полям моделей можно найти в спецификации к API.
Как должна быть настроена админка
В интерфейс админ-зоны нужно вывести необходимые поля моделей и настроить поиск:
вывести все модели с возможностью редактирования и удаления записей;
для модели пользователей добавить поиск по адресу электронной почты и имени пользователя;
для модели рецептов:
в списке рецептов вывести название и имя автора рецепта;
добавить поиск по автору, названию рецепта, и фильтрацию по тегам;
на странице рецепта вывести общее число добавлений этого рецепта в избранное.
для модели ингредиентов:
в список вывести название ингредиента и единицы измерения;
добавить поиск по названию.
Каким требованиям должна соответствовать инфраструктура проекта
Проект должен использовать базу данных PostgreSQL. Вы можете разрабатывать проект на SQLite, а PostgreSQL подключить позже, при подготовке к деплою.
В Django-проекте должен быть файл requirements.txt со всеми зависимостями.
Проект нужно запустить на вашем удалённом виртуальном сервере в четырёх контейнерах — nginx, PostgreSQL, backend и frontend через docker-compose. Контейнер frontend должен использоваться лишь для подготовки файлов. Доступы к серверу вы получили в начале изучения модуля «Управление проектом на удалённом сервере».
Данные должны сохраняться в volumes.
Образы проекта должны быть запушены в облачное хранилище образов.
Должен быть настроен автоматический деплой с использованием CI/CD через GitHub Actions.
Проект должен быть доступен по IP или доменному имени.
Что ещё должно быть в проекте
Веб-приложение должно быть наполнено тестовыми данными: нужно создать несколько пользователей с разными уровнями доступа и добавить хотя бы по одному рецепту от имени каждого пользователя.
Если останутся силы и время
На страницах  проекта есть ссылки «О проекте» и «Технологии». Клик по этим ссылкам приводит к ошибке 404: страницы не подключены к проекту. Если после выполнения основной части задания у вас ещё останутся силы — настройте доступ к этим страницам.
Это необязательная часть задания: если вы не подключите эти страницы — это не будет считаться ошибкой.
Заготовки страниц есть в репозитории:
«О проекте» — в файле frontend/src/pages/about/index.js,
«Технологии» — в файле frontend/src/pages/technologies/index.js.
Чтобы пользователь мог попасть на эти страницы — подключите их. Для этого измените файл frontend/src/App.js:
раскомментируйте строки 10, 25 (необходимые импорты), и строки 298 и 307 (подключение к роутеру),
закомментируйте или удалите строки 297 и 306 — там размещён код, который возвращает ошибку 404 для этих страниц.
Вы можете наполнить эти страницы любым содержимым по своему вкусу.